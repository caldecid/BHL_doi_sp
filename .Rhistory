plants_hifen$taxon_name =  stringr::str_replace(plants_hifen$taxon_name,
"-", "")
## joining datasets
plants_bra <- rbind(plants_bra, plants_hifen)
##family names
fam_names <- unique(plants_bra$Family)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##if else statement for not saving empty dfs
if(dim(ipni_present)[1] == 0){
print("No species present in IPNI")
list_fam_IPNI[[i]] = NULL
} else{
##IPNI species present in Flora de Brasil
ipni_present = ipni_df[which(ipni_df$name %in% plants_bra$taxon_name), ] %>%
dplyr::rename(name_IPNI = name,
id_IPNI = id)
##eliminating duplicated species
if(sum(duplicated(ipni_present$name_IPNI)) == 0){
ipni_present
} else {
ipni_present <- ipni_present[-which(duplicated(ipni_present$name_IPNI)),]
}
##subset of the FFB DF
FFB_df <- plants_bra %>% filter(taxon_name %in% ipni_present$name_IPNI) %>%
select(taxon_name, ID) %>%
dplyr::rename(name_FFB = taxon_name,
id_FFB = ID)
##eliminating duplicated species
if(sum(duplicated(FFB_df$name_FFB)) == 0){
FFB_df
} else {
FFB_df <- FFB_df[-which(duplicated(FFB_df$name_FFB)),]
}
##binding and ordering columns
ipni_present <- cbind(FFB_df, ipni_present)
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_present
}
}
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##if else statement for not saving empty dfs
if(dim(ipni_df)[1] == 0){
print("No species present in IPNI")
list_fam_IPNI[[i]] = NULL
} else{
##IPNI species present in Flora de Brasil
ipni_present = ipni_df[which(ipni_df$name %in% plants_bra$taxon_name), ] %>%
dplyr::rename(name_IPNI = name,
id_IPNI = id)
##eliminating duplicated species
if(sum(duplicated(ipni_present$name_IPNI)) == 0){
ipni_present
} else {
ipni_present <- ipni_present[-which(duplicated(ipni_present$name_IPNI)),]
}
##subset of the FFB DF
FFB_df <- plants_bra %>% filter(taxon_name %in% ipni_present$name_IPNI) %>%
select(taxon_name, ID) %>%
dplyr::rename(name_FFB = taxon_name,
id_FFB = ID)
##eliminating duplicated species
if(sum(duplicated(FFB_df$name_FFB)) == 0){
FFB_df
} else {
FFB_df <- FFB_df[-which(duplicated(FFB_df$name_FFB)),]
}
##binding and ordering columns
ipni_present <- cbind(FFB_df, ipni_present)
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_present
}
}
View(list_fam_IPNI)
###removing null elements
list_fam_IPNI = list_fam_IPNI[-which(sapply(list_fam_IPNI, is.null))]
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name_FFB", "id_FFB",
"name_IPNI", "id_IPNI", "family", "genus",
"species",
"hybrid",
"rank", "reference",
"publication", "publicationYear",
"distribution", "bhlLink",
"remarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id))
do.call("rbind.fill", list_fam_IPNI)
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name_FFB", "id_FFB",
"name_IPNI", "id_IPNI", "family", "genus",
"species",
"hybrid",
"rank", "reference",
"publication", "publicationYear",
"distribution", "bhlLink",
"remarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id_IPNI))
##working with the columns
df_ipni_families$citationType <- "tax_nov"
df_ipni_families$source <- "IPNI"
##obtaining the doi
df_ipni_families$doi <- ifelse(str_detect(df_ipni_families$remarks,
"doi:[^\\s]+"),
paste0("https://doi.org/",
str_extract(df_ipni_families$remarks,
"(?<=doi:)[^\\s]+")), NA)
rownames(df_ipni_families) <- NULL
##eliminating duplicated species
if(sum(duplicated(df_ipni_families$name)) == 0){
df_ipni_families
} else {
df_ipni_families <- df_ipni_families[-which(duplicated(df_ipni_families$name)),]
}
##removing hybrid species
df_ipni_families <- df_ipni_families %>% dplyr::filter(hybrid == "FALSE")
##removing hybrid column
df_ipni_families <- df_ipni_families %>% dplyr::select(-hybrid)
View(df_ipni_families)
df_BHL <- df_ipni_families
##replacing Leguminosae by Fabaceae
df_BHL <- df_BHL %>% mutate(family = case_when(family == "Leguminosae" ~ "Fabaceae",
.default = as.character(family)))
##family present
family_x <- sort(unique(df_BHL$family))
##list for each family
list_present <- vector("list", length = length(family_x))
##recovering ID
angio_id <- angio %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_x)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_x)){
list_present[[i]] <- df_BHL %>% filter(family == family_x[i])
write_csv(list_present[[i]],
file =paste0("Data/Processed/Angiosperms/Family/",
family_x[i], "_FB",
angio_id$ID[i], ".csv"))
}
gymnosperms <- read_excel("Data/Raw/datasheet_gymnosperms_en.xlsx")
BHL_function <- function(df){
##completing dataframe information (auxiliary function)
plants_bra = complete_df(df = df)
##dataset with only species with hifen
plants_hifen =
plants_bra[which(stringr::str_detect(plants_bra$taxon_name,
"-")), ]
##removing hifen
plants_hifen$taxon_name =  stringr::str_replace(plants_hifen$taxon_name,
"-", "")
## joining datasets
plants_bra <- rbind(plants_bra, plants_hifen)
##family names
fam_names <- unique(plants_bra$Family)
######creating list for keeping the missing species within each family according to IPNI
list_fam_IPNI <- vector("list", length = length(fam_names))
##naming
names(list_fam_IPNI) <- fam_names
###################IPNI######################################
##loop for finding missing species in the Flora de Brasil
for(i in seq_along(fam_names)){
###tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(list(family = fam_names[i],
distribution = "Brazil"),
limit = 1000,
filters = c("species")))
}, error = function(e){
message("Absent family in IPNI")
print(e)
})
##if else statement for not saving empty dfs
if(dim(ipni_df)[1] == 0){
print("No species present in IPNI")
list_fam_IPNI[[i]] = NULL
} else{
##IPNI species present in Flora de Brasil
ipni_present = ipni_df[which(ipni_df$name %in% plants_bra$taxon_name), ] %>%
dplyr::rename(name_IPNI = name,
id_IPNI = id)
##eliminating duplicated species
if(sum(duplicated(ipni_present$name_IPNI)) == 0){
ipni_present
} else {
ipni_present <- ipni_present[-which(duplicated(ipni_present$name_IPNI)),]
}
##subset of the FFB DF
FFB_df <- plants_bra %>% filter(taxon_name %in% ipni_present$name_IPNI) %>%
select(taxon_name, ID) %>%
dplyr::rename(name_FFB = taxon_name,
id_FFB = ID)
##eliminating duplicated species
if(sum(duplicated(FFB_df$name_FFB)) == 0){
FFB_df
} else {
FFB_df <- FFB_df[-which(duplicated(FFB_df$name_FFB)),]
}
##binding and ordering columns
ipni_present <- cbind(FFB_df, ipni_present)
##inserting a df inside each list with the missing species in the Flora Brazil
list_fam_IPNI[[i]] = ipni_present
}
}
###removing null elements
list_fam_IPNI = list_fam_IPNI[-which(sapply(list_fam_IPNI, is.null))]
#####collapsing the list in a df
df_ipni_families <- do.call("rbind.fill", list_fam_IPNI) %>%
dplyr::select(tidyselect::any_of(c("name_FFB", "id_FFB",
"name_IPNI", "id_IPNI", "family", "genus",
"species",
"hybrid",
"rank", "reference",
"publication", "publicationYear",
"distribution", "bhlLink",
"remarks")))%>%
dplyr::mutate(url = paste0("www.ipni.org/n/", id_IPNI))
##working with the columns
df_ipni_families$citationType <- "tax_nov"
df_ipni_families$source <- "IPNI"
##obtaining the doi
df_ipni_families$doi <- ifelse(str_detect(df_ipni_families$remarks,
"doi:[^\\s]+"),
paste0("https://doi.org/",
str_extract(df_ipni_families$remarks,
"(?<=doi:)[^\\s]+")), NA)
rownames(df_ipni_families) <- NULL
##eliminating duplicated species
if(sum(duplicated(df_ipni_families$name)) == 0){
df_ipni_families
} else {
df_ipni_families <- df_ipni_families[-which(duplicated(df_ipni_families$name)),]
}
##removing hybrid species
df_ipni_families <- df_ipni_families %>% dplyr::filter(hybrid == "FALSE")
##removing hybrid column
df_ipni_families <- df_ipni_families %>% dplyr::select(-hybrid)
return(df_ipni_families)
}
gymnosperms <- read_excel("Data/Raw/datasheet_gymnosperms_en.xlsx")
x_gymno <- BHL_function(df = gymnosperms)
##family present
family_gymno <- sort(unique(x_gymno$family))
##list for each family
list_gymno <- vector("list", length = length(family_gymno))
View(x_gymno)
##recovering ID
gymno_id <- gymnosperms %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_gymno)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_gymno)){
list_gymno[[i]] <- x_gymno %>% filter(family == family_gymno[i])
write_csv(list_gymno[[i]],
file =paste0("Data/Processed/Gymnosperms/Family/",
family_gymno[i], "_FB",
gymno_id$ID[i], ".csv"))
}
# Ferns -------------------------------------------------------------------
ferns <- read_excel("Data/Raw/datasheet_ferns_en.xlsx")
x_ferns <- BHL_function(df = ferns)
##family present
family_ferns <- sort(unique(x_ferns$family))
##list for each family
list_ferns <- vector("list", length = length(family_ferns))
##recovering ID
ferns_id <- ferns %>% select(ID, Family) %>% drop_na %>%
filter(Family %in% family_ferns)
##for loop for generating the list and the csv file for each family
for(i in seq_along(family_ferns)){
list_ferns[[i]] <- x_ferns %>% filter(family == family_ferns[i])
write_csv(list_ferns[[i]],
file =paste0("Data/Processed/Ferns/Family/",
family_ferns[i], "_FB",
ferns_id$ID[i], ".csv"))
}
library(devtools)
# devtools::install_github("barnabywalker/kewr")
library(kewr)
library(tidyverse)
library(readxl)
library(plyr)
library(stringr)
library(dplyr)
library(tibble)
getBHL <- function(df){
# Completing dataframe information (auxiliary function)
df = complete_df(df = df)
df <- df %>% dplyr::rename(id_FFB = ID)  %>%
select("id_FFB", "Group", "Family", "Genus", "Species", "taxon_name", "Author") %>%
tibble::add_column(reference = NA,
publication = NA,
publicationYear = NA,
bhlLink = NA,
remarks = NA,
doi = NA,
id_IPNI = NA,
url_IPNI = NA)
# Loop for finding missing species in the Flora de Brasil
for (i in seq_along(df$taxon_name)) {
# Pause for 300 seconds right after every 500th search,
# because IPNI website may crash when searching uninterruptedly.
if (i %% 500 == 0) {
Sys.sleep(300)
}
# tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(df$taxon_name[i],
filters = c("species")))
}, error = function(e){
message("Absent species in IPNI")
print(e)
})
if (nrow(ipni_df) > 1) {
au <- paste(ipni_df$name, ipni_df$authors)
tf <- au %in% paste(df$taxon_name[i], df$Author[i])
ipni_df = ipni_df[tf, ]
}
if (nrow(ipni_df) == 1) {
if (any(names(ipni_df) %in% "reference")) {
df$reference[i] = ipni_df$reference
}
if (any(names(ipni_df) %in% "publication")) {
df$publication[i] = ipni_df$publication
}
if (any(names(ipni_df) %in% "publicationYear")) {
df$publicationYear[i] = ipni_df$publicationYear
}
if (any(names(ipni_df) %in% "bhlLink")) {
df$bhlLink[i] = ipni_df$bhlLink
}
if (any(names(ipni_df) %in% "remarks")) {
df$remarks[i] = ipni_df$remarks
}
df$id_IPNI[i] = ipni_df$id
message("BHL and Reference data retrieved from IPNI ", i, "/", length(df$taxon_name))
}
}
# Obtaining the IPNI url
df <- df %>%
dplyr::mutate(url_IPNI = paste0("www.ipni.org/n/", id_IPNI))
##obtaining the doi
df$doi <- ifelse(stringr::str_detect(df$remarks,
"doi:[^\\s]+"),
paste0("https://doi.org/",
stringr::str_extract(df$remarks,
"(?<=doi:)[^\\s]+")), NA)
df$url_IPNI[grepl("NA$", df$url_IPNI)] = NA
return(df)
}
complete_df <- function(df){
##checking and changing if column names are in Portuguese
if (any(colnames(df) %in% "Espécie")) {
colnames(df) <- c("ID", "Rank", "Group", "Class", "Division",
"Order", "Family", "Subfamily", "Tribe", "Genus",
"Species", "Subspecies", "Variety", "Form", "Author",
"Registry", "Status", "Qualifier", "Original work",
"Origin", "Endemic", "Occurs in Brazil", "Vouchers",
"Reference", "Life Form", "Substrate", "Plant hosts",
"Animals hosts", "Region Distribution", "State",
"Hydrographic Distribution", "Environment",
"Phytogeographic Domains", "Vegetation Types",
"has as a synonym", "Is a synonym", "Vernacular name",
"Bibliographic", "Authorship", "Last Update",
"User's Last Updated", "How To Cite")
}
# Manipulating dataframe
df <- df %>% fill(Family, Genus) %>%
drop_na(Species) %>%
unite("taxon_name",
Genus:Species,
sep = " ", remove = FALSE)
df = df[!df$Qualifier %in% c("Orthographical variant"), ]
return(df)
}
# Angiosperms ------------------------------------------------------------------
angios <- readxl::read_excel("Data/Raw/datasheet_angiosperms_en.xlsx")
df_BHL_angios <- getBHL(df = angios)
library(devtools)
# devtools::install_github("barnabywalker/kewr")
library(kewr)
library(tidyverse)
library(readxl)
library(plyr)
library(stringr)
library(dplyr)
library(tibble)
getBHL <- function(df){
# Completing dataframe information (auxiliary function)
df = complete_df(df = df)
df <- df %>% dplyr::rename(id_FFB = ID)  %>%
select("id_FFB", "Group", "Family", "Genus", "Species", "taxon_name", "Author") %>%
tibble::add_column(reference = NA,
publication = NA,
publicationYear = NA,
bhlLink = NA,
remarks = NA,
doi = NA,
id_IPNI = NA,
url_IPNI = NA)
# Loop for finding missing species in the Flora de Brasil
for (i in seq_along(df$taxon_name)) {
# Pause for 300 seconds right after every 500th search,
# because IPNI website may crash when searching uninterruptedly.
if (i %% 500 == 0) {
Sys.sleep(300)
}
# tryCatch for handling the missing families in IPNI
tryCatch({
##calling the species within families in IPNI
ipni_df = tidy(kewr::search_ipni(df$taxon_name[i],
filters = c("species")))
}, error = function(e){
message("Absent species in IPNI")
print(e)
})
if (nrow(ipni_df) > 1) {
au <- paste(ipni_df$name, ipni_df$authors)
tf <- au %in% paste(df$taxon_name[i], df$Author[i])
ipni_df = ipni_df[tf, ]
}
if (nrow(ipni_df) == 1) {
if (any(names(ipni_df) %in% "reference")) {
df$reference[i] = ipni_df$reference
}
if (any(names(ipni_df) %in% "publication")) {
df$publication[i] = ipni_df$publication
}
if (any(names(ipni_df) %in% "publicationYear")) {
df$publicationYear[i] = ipni_df$publicationYear
}
if (any(names(ipni_df) %in% "bhlLink")) {
df$bhlLink[i] = ipni_df$bhlLink
}
if (any(names(ipni_df) %in% "remarks")) {
df$remarks[i] = ipni_df$remarks
}
df$id_IPNI[i] = ipni_df$id
message("BHL and Reference data retrieved from IPNI ", i, "/", length(df$taxon_name))
}
}
# Obtaining the IPNI url
df <- df %>%
dplyr::mutate(url_IPNI = paste0("www.ipni.org/n/", id_IPNI))
##obtaining the doi
df$doi <- ifelse(stringr::str_detect(df$remarks,
"doi:[^\\s]+"),
paste0("https://doi.org/",
stringr::str_extract(df$remarks,
"(?<=doi:)[^\\s]+")), NA)
df$url_IPNI[grepl("NA$", df$url_IPNI)] = NA
return(df)
}
complete_df <- function(df){
##checking and changing if column names are in Portuguese
if (any(colnames(df) %in% "Espécie")) {
colnames(df) <- c("ID", "Rank", "Group", "Class", "Division",
"Order", "Family", "Subfamily", "Tribe", "Genus",
"Species", "Subspecies", "Variety", "Form", "Author",
"Registry", "Status", "Qualifier", "Original work",
"Origin", "Endemic", "Occurs in Brazil", "Vouchers",
"Reference", "Life Form", "Substrate", "Plant hosts",
"Animals hosts", "Region Distribution", "State",
"Hydrographic Distribution", "Environment",
"Phytogeographic Domains", "Vegetation Types",
"has as a synonym", "Is a synonym", "Vernacular name",
"Bibliographic", "Authorship", "Last Update",
"User's Last Updated", "How To Cite")
}
# Manipulating dataframe
df <- df %>% fill(Family, Genus) %>%
drop_na(Species) %>%
unite("taxon_name",
Genus:Species,
sep = " ", remove = FALSE)
df = df[!df$Qualifier %in% c("Orthographical variant"), ]
return(df)
}
# Angiosperms ------------------------------------------------------------------
angios <- readxl::read_excel("Data/Raw/datasheet_angiosperms_en.xlsx")
df_BHL_angios <- getBHL(df = angios)
